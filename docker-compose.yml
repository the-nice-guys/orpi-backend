version: "3.5"

services:
  infrastructure-service:
    build:
      context: .
      dockerfile: InfrastructureService/Dockerfile
    container_name: infrastructure-service
    ports:
      - "5175:80"
      - "7030:7030"
    depends_on:
      - infrastructure-service-db
    environment:
      DB_HOST: infrastructure-service-db

  infrastructure-service-db:
    image: postgres:latest
    container_name: infrastructure-service-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=infrastructure-service
    volumes:
      - ./InfrastructureService/Schemas/base_schema.sql:/docker-entrypoint-initdb.d/000_init.sql
      - ./InfrastructureService/Migrations:/docker-entrypoint-initdb.d/
    #- ./data:/var/lib/postgresql/data
    
  history-service-db:
    image: postgres:14.4
    container_name: history-service-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=history-service
    volumes:
      - ./HistoryService/Schemas/base_schema.sql:/docker-entrypoint-initdb.d/000_init.sql
      - ./HistoryService/Migrations:/docker-entrypoint-initdb.d/
    #- ./data:/var/lib/postgresql/data

  coordinator-service-cache:
    image: redis:7.0.7
    container_name: coordinator-service-cache
    ports:
      - "6379:6379"
    #command: redis-server --save 20 1 --loglevel warning --requirepass password
  
  cache-ui:
    image: marian/rebrow
    container_name: cache-rebrow-ui
    ports:
      - "9093:5001"
    links:
      - coordinator-service-cache:myredis
      
  auth-service:
    container_name: auth-service
    build: 
      context: .
      dockerfile: AuthenticationService/Dockerfile
    ports:
      - 5050:7133
    environment:
      - UserDataBase__Host=auth-service-database
      - UserDataBase__Port=5431
      - UserDataBase__Name=orpi
      - UserDataBase__User=auth-service
      - UserDataBase__Password=authpass
    depends_on:
      auth-service-database:
        condition: service_healthy

  auth-service-database:
    image: postgres:14.4
    container_name: auth-service-database
    environment:
      - POSTGRES_USER=auth-service
      - POSTGRES_PASSWORD=authpass
      - POSTGRES_DB=orpi
      - PGPORT=5431
    ports:
      - 5431:5431
    healthcheck:
      test: "exit 0"
    # volumes: 
    #   - ./postgresql-auth-service-data:/var/lib/postgresql/data

  monitoring-service:
    container_name: monitoring-service
    build:
      context: .
      dockerfile: MonitoringModule/Dockerfile
    ports:
      - "5292:5292"
  
  history-service:
    container_name: history-service
    build:
      context: .
      dockerfile: HistoryService/Dockerfile
    ports:
      - "5056:5056"
  
  coordinator-service:
    container_name: coordinator-service
    build:
      context: .
      dockerfile: CoordinatorService/Dockerfile
    ports:
      - "5287:5287"
  
  docker-module:
    container_name: docker-module
    build:
      context: .
      dockerfile: DockerModule/Dockerfile
    ports:
      - "5074:5074"

  docker-module-db:
    container_name: docker-module-db
    image: postgres:latest
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=docker-module
    volumes:
      - ./DockerModule/Schemas/base_schema.sql:/docker-entrypoint-initdb.d/000_init.sql
    #- ./data:/var/lib/postgresql/data
    
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    depends_on:
      - zookeeper
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    expose:
      - "29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
